# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv
*_, work_hours, salary_per_hour, bonus = argv
result = int(work_hours) * int(salary_per_hour) + int(bonus)
print(f'Результат: {result}')


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

a = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print([val for idx, val in enumerate(a) if 0 < idx-1 and a[idx-1] < a[idx]])


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

print([i for i in range(20, 241) if i % 20 == 0 or i % 21 ==0])


# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

a = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print([val for idx, val in enumerate(a) if a.count(val) == 1])


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
print(reduce(lambda x,y: x + y, [i for i in range(100, 1000+1, 2)]))


#6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

# итератор, генерирующий целые числа, начиная с указанного;
def gen_whole_number(start = 0, finish = 10):
    x = start
    while x <= finish:
        yield x
        x += 1

for i in gen_whole_number(3):
    print(i)


# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Вариант с функциями count() и cycle() модуля itertools:
from itertools import cycle, count
def gen_str(start = 0, finish = 10):
    a = ['Lorem', 'ipsum', 'dolor']
    sequence = count(start)
    i = 0
    while i < finish:
        try:
            yield a[next(sequence)]
            i += 1
        except:
            sequence = count(start)

# Простой вариант:
def gen_str(start = 0, finish = 10):
    a = ['Lorem', 'ipsum', 'dolor']
    x = start
    i = 0
    while i <= finish:
        if x < len(a):
            yield a[x]
            x += 1
            i += 1
        else:
            x = start

for i in gen_str():
    print(i)


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    x = 1
    yield x
    for num in range(2, n + 1):
        x *= num
        yield x

for i in fact(5):
    print(i)
